server {
    listen         80;
    server_name    _;
    return         301 https://$host$request_uri;
}

server {
    listen 443 ssl http2 default_server;
    server_name  _;

    gzip on;
    gzip_min_length 1000;
    gzip_types text/plain text/css text/javascript text/xml application/json application/x-javascript application/xml+rss;

    # Max upload size
    client_max_body_size 2G;

    root        /usr/share/nginx/www/;

    access_log  /var/log/nginx/uf.prod.access.log;
    error_log   /var/log/nginx/uf.prod.error.log;

    # Settings are taken from https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.9.5&openssl=1.0.1e&hsts=yes&profile=modern
    ssl on;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # "modern configuration" provided by Mozilla
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # Verify chain of trust of OCSP response using Root CA and Intermediate certs.
    # For letsencrypt certificates this certificate already includes the full
    # chain so we just use that.
    ssl_trusted_certificate /etc/nginx/ssl/nginx.crt;


    location / {
        proxy_pass          http://127.0.0.1:9001;
        proxy_set_header    Host       $host;
        proxy_set_header    X-Real-IP  $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 180s;
        proxy_read_timeout    180s;
    }

    location /static {
        autoindex off;
        alias /srv/calthorpe_static/;
        expires 30d;
        # TODO 2015-12-14: Assess these commented-out options.
        # add_header Pragma public;
        # add_header Cache-Control "public";
    }

    location /downloads {
        internal;
        alias /srv/calthorpe_media/downloadable/;
    }

    location /tiles {
        rewrite /tiles/(.*) /$1 break;
        proxy_pass          http://127.0.0.1:8484;
        proxy_redirect      off;
        proxy_set_header    Host       $host;
        proxy_set_header    X-Real-IP  $remote_addr;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 180s;

        proxy_read_timeout 180s;
    }

    location /socket.io {
        proxy_pass http://127.0.0.1:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

}
